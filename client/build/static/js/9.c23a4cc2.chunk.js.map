{"version":3,"sources":["Pages/shop/ShopPage.jsx","redux/shop/shopSelector.js"],"names":["mapStateToProps","createStructuredSelector","isCollectionLoaded","selectIsCollectionLoaded","connect","dispatch","fetchCollectionAsync","fetchCollectionStart","match","CollectionOverviewContainer","lazy","CollectionContainer","useEffect","className","fallback","exact","path","component","shopSelector","state","shop","selectShop","createSelector","collections","selectCollectionsForPreview","Object","keys","map","key","isFetching"],"mappings":"yLAmCA,IAAMA,EAAkBC,YAAyB,CAC7CC,mBAAoBC,MASTC,sBAAQJ,GANI,SAAAK,GAAQ,MAAK,CACpCC,qBAAsB,kBAAMD,EAASC,gBACrCC,qBAAsB,kBAAMF,EAASE,mBAI1BH,EAnCf,YAA0F,IAA1EI,EAAyE,EAAzEA,MAAiDD,GAAwB,EAAlEL,mBAAkE,EAA9CI,qBAA8C,EAAxBC,sBACvDE,EAA8BC,gBAAK,kBAAM,iCACzCC,EAAsBD,gBAAK,kBAAM,iCASvC,OALAE,qBAAU,WAENL,MACD,CAACA,IAGA,qBAAKM,UAAU,YAAf,SAEI,eAAC,WAAD,CAAUC,SAAU,cAAC,IAAD,IAApB,UACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAI,UAAKR,EAAMQ,MAAQC,UAAWR,IAC/C,cAAC,IAAD,CAAOO,KAAK,YAAYC,UAAWN,a,gCC1BnD,gFAGMO,EAAe,SAAAC,GAAK,OAAIA,EAAMC,MAEvBC,EAAaC,YACtB,CAACJ,IACD,SAAAE,GAAI,OAAIA,EAAKG,eAGJC,EAA8BF,YACvC,CAACD,IACD,SAAAE,GAAW,OAAIA,EAAcE,OAAOC,KAAKH,GAAaI,KAAI,SAAAC,GAAG,OAAIL,EAAYK,MAAQ,MAQ5EzB,GAL2BmB,YACpC,CAACJ,IACD,SAAAE,GAAI,OAAIA,EAAKS,cAGuBP,YACpC,CAACJ,IACD,SAAAE,GAAI,QAAMA,EAAKG","file":"static/js/9.c23a4cc2.chunk.js","sourcesContent":["import React, { useEffect, lazy, Suspense } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Route } from 'react-router-dom'\r\nimport { createStructuredSelector } from 'reselect'\r\nimport Spinner from '../../Components/spinner/Spinner'\r\nimport { fetchCollectionAsync, fetchCollectionStart } from '../../redux/shop/shopActions'\r\nimport { selectIsCollectionLoaded } from '../../redux/shop/shopSelector'\r\n\r\n\r\n\r\nfunction Shop({ match, isCollectionLoaded, fetchCollectionAsync, fetchCollectionStart }) {\r\n    const CollectionOverviewContainer = lazy(() => import('../../Components/collection-overview/CollectionOverviewContainer'))\r\n    const CollectionContainer = lazy(() => import('../collection/CollectionContainer'))\r\n\r\n    // const CollectionOverviewWithSpinner = WithSpinner(CollectionOverview)\r\n    // const CollectionPageWithSpinner = WithSpinner(Collection)\r\n    useEffect(() => {\r\n        // fetchCollectionAsync()\r\n        fetchCollectionStart()\r\n    }, [fetchCollectionStart])\r\n\r\n    return (\r\n        <div className='shop-page'>\r\n            {/* <Route exact path={`${match.path}`} render={(props) => <CollectionOverviewWithSpinner isLoading={!isCollectionLoaded} {...props} />} /> */}\r\n            <Suspense fallback={<Spinner />}>\r\n                <Route exact path={`${match.path}`} component={CollectionOverviewContainer} />\r\n                <Route path='/shop/:Id' component={CollectionContainer} />\r\n            </Suspense>\r\n\r\n            {/* <Route path='/shop/:Id' render={props => <CollectionPageWithSpinner isLoading={!isCollectionLoaded} {...props} />} /> */}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    isCollectionLoaded: selectIsCollectionLoaded\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchCollectionAsync: () => dispatch(fetchCollectionAsync()),\r\n    fetchCollectionStart: () => dispatch(fetchCollectionStart())\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Shop)\r\n","import { createSelector } from 'reselect'\r\n\r\n\r\nconst shopSelector = state => state.shop\r\n\r\nexport const selectShop = createSelector(\r\n    [shopSelector],\r\n    shop => shop.collections\r\n)\r\n\r\nexport const selectCollectionsForPreview = createSelector(\r\n    [selectShop],\r\n    collections => collections ? Object.keys(collections).map(key => collections[key]) : []\r\n)\r\n\r\nexport const selectCollectionFetching = createSelector(\r\n    [shopSelector],\r\n    shop => shop.isFetching\r\n)\r\n\r\nexport const selectIsCollectionLoaded = createSelector(\r\n    [shopSelector],\r\n    shop => !!shop.collections // !! this will provide a boolean value wheather collection is null or filled with data\r\n)"],"sourceRoot":""}